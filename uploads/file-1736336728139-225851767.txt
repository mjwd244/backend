import React, { useState, useEffect,useRef } from 'react';
import { useUser } from '../components/UserContext';
import styles from '../Groupchat.module.css';

const Message = ({ message, friendObject, messageClasses, componentType }) => {
  const { mainuser ,currentTime,selectedUser,mainUserTimeStampSave,friendUserTimestampSave,setfriendUserTimestampSave,setmainUserTimeStampSave,setMessage} = useUser();
  const [messageClass, setMessageClass] = useState();
  const [messageInfoClass, setMessageInfoClass] = useState();
  const [messageContentClass, setMessageContentClass] = useState();
  const [arraydates,setarraydates]  = useState([]); 
  const newArrayDates = [];

 

  useEffect(() => {
    if (componentType === 'chat') {
      setMessageClass(messageClasses.message);
      setMessageInfoClass(messageClasses.messageInfo);
      setMessageContentClass(messageClasses.messageContent);
    } else if (componentType === 'group') {
      setMessageClass(messageClasses.messagegroup);
      setMessageInfoClass(messageClasses.groupmessageInfo);
      setMessageContentClass(messageClasses.groupmessageContent);
    }
  }, [componentType, messageClasses]);



  useEffect(() => {
  
   
    
    if (!Array.isArray(message) || message.length === 0) {
      console.log("No messages available.");
      return;
    }
    console.log(message)
    const dates = comparemessagedates();
    setarraydates(dates)
    
   
  
  },[message]);

  useEffect(() => {
  console.log(arraydates)
  },[arraydates])
 
  function formatTimestampToDate1(timestamp) {
    const date = new Date(timestamp);
  
    // Get the day of the month (1-31)
    const day = date.getDate();
  
    // Get the month (0-11) and add 1 to make it 1-12
    const monthNumber = date.getMonth() + 1;
  
    // Get the full month name
    const monthName = date.toLocaleString('default', { month: 'long' });
  
    // Get the year
    const year = date.getFullYear();

    const dayName = date.toLocaleString('default', { weekday: 'long' });
  
    // Return an object with all four values
    return {
      day,
      monthNumber,
      year,
      monthName,
      dayName
    };
  }
  function formatTimestampToDate() {
    const date = new Date();
  
    // Get the day of the month (1-31)
    const day = date.getDate();
  
    // Get the month (0-11) and add 1 to make it 1-12
    const monthNumber = date.getMonth() + 1;
  
    // Get the full month name
    const monthName = date.toLocaleString('default', { month: 'long' });
  
    // Get the year
    const year = date.getFullYear();

    const dayName = date.toLocaleString('default', { weekday: 'long' });
  
    // Return an object with all four values
    return {
      day,
      monthNumber,
      year,
      monthName,
      dayName
    };
  }


  const produceptagsbycomparingdates = (messages) =>{
    let messagedate = formatTimestampToDate1(messages)
    let currentdate = formatTimestampToDate()
    let dateTag = null;

    if(messagedate.year !== currentdate.year){
      dateTag = `${messagedate.day},  ${messagedate.monthName}, ${messagedate.year}`;
    }
    else if(messagedate.monthNumber !== currentdate.monthNumber){
      dateTag = `${messagedate.day}, ${messagedate.monthName}, ${messagedate.year}`;
    }
    else if(messagedate.day !== currentdate.day){

      if(messagedate.day === currentdate.day - 1){
        dateTag = 'Yesterday';
      }else if(messagedate.day === currentdate.day - 2){
        dateTag = messagedate.dayName;
    }
    else if(messagedate.day === currentdate.day - 3){
      dateTag = messagedate.dayName;
    }else if(messagedate.day === currentdate.day - 4){
      dateTag = messagedate.dayName;
    }else if(messagedate.day === currentdate.day - 5){
      dateTag = messagedate.dayName;
    }else if(messagedate.day === currentdate.day - 6){
      dateTag = messagedate.dayName;
    }else{
      dateTag = `${messagedate.day}, ${messagedate.monthNumber},  ${messagedate.year}`;
    }
  }
  else if(messagedate.day=== currentdate.day){
    dateTag = 'Today';
  }
  return dateTag;
}

  const comparemessagedates = () =>{
   
    let counter = message.length;
    console.log("counter " + counter)
     
    for (let i = 1; i <= counter; i++) {
      newArrayDates.push(produceptagsbycomparingdates(message[counter - i].timestamp));
    }
    console.log("newArrayDates "+ newArrayDates)
   return newArrayDates// Update the state with the new array
  }


  function formatTimestampToTime(timestamp) {
    const date = new Date(timestamp);
    const hours = date.getHours().toString().padStart(2, '0'); // Ensure two digits
    const minutes = date.getMinutes().toString().padStart(2, '0'); // Ensure two digits
    return `${hours}:${minutes}`;
  }


  // the new histroy of messages is 1. i save the time of each user the timestmap completely so i know which day and moth etc 
  //2 . i compare this saved time with each new message of the same user when the day is else day i let the p tag that is invisable to be shown at the middle of page 
  //3 . this p tag should have 

  return (
    <>
{Array.isArray(message) && message.length > 0 && componentType === "chat" && (
  Array.isArray(friendObject) && friendObject.length > 0 ? (
  
      

  
    
    message.filter((msg) => msg.source === componentType).map((msg, index) => {
      const friend = friendObject.find((friend) => friend.id === msg.sender);
      const isFriend = !!friend;
      const photoURL = isFriend ? friend.photo : mainuser[0].photoURL;

      
      const currentDateTag = arraydates[message.length - (index + 1)];
      const previousDateTag = index > 0 ? arraydates[message.length - index] : null;

      return (
        <>  

            
          
        <div key={index}>
        {currentDateTag && currentDateTag !== previousDateTag && (
                <div className="startconversationTitel">
                  <p>{currentDateTag}</p>
                </div>
              )}
          <div
            className={`${messageClass} ${
              msg.sender === mainuser[0].userId ? styles.owner : styles.notowner
            }`}
          >
            <div className={messageInfoClass}>
              <img src={photoURL} alt="" />
              <p>{formatTimestampToTime(msg.timestamp)}</p>
            </div>
            <div className={messageContentClass}>
              <p className={styles.text}>{msg.text}</p>
            </div>
          </div>
        </div>
        </>
      );
    })
  ) : (
    <div className={messageContentClass}>
      <p>No messages to display</p>
    </div>
  )
)}

{Array.isArray(message) && message.length > 0 && componentType === "group" && (
  message.filter((msg) => msg.source === componentType).map((msg, index) => {
    return (
   
      <div key={index}>
       
        <div
          className={`${messageClass} ${
            msg.sender.id === mainuser[0].userId ? styles.owner : styles.notowner
          }`}
        >
          <div className={messageInfoClass}>
            <img src={msg.sender.id === mainuser[0].userId ? mainuser[0].photoURL : msg.sender.photo} alt="" />
            <p>{formatTimestampToTime(msg.timestamp)}</p>
          </div>
          <div className={messageContentClass}>
            <p className={styles.text}>{msg.text}</p>
          </div>
        </div>
      </div>
    );
  })
)}
    </>
  );
};

export default Message;